name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Install dependencies
      run: |
        go mod download
        # Pin to CI-known-good version to avoid config incompatibilities
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.8
        
    - name: Run golangci-lint
      run: golangci-lint run --verbose --timeout=5m
      
    - name: Check Go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum
        
    - name: Check formatting (exclude vendor)
      shell: bash
      run: |
        set -euo pipefail
        FILES=$(git ls-files '*.go' | grep -v '^vendor/' || true)
        if [ -z "$FILES" ]; then exit 0; fi
        DIFF=$(gofmt -s -d $FILES)
        if [ -n "$DIFF" ]; then
          echo "$DIFF"
          echo "Go code is not formatted properly. Run 'gofmt -s -w .'"
          exit 1
        fi

  # Job 2: Security Scanning
  security:
    name: Security Scanning (disabled)
    if: false # disabled temporarily for private repo limitations
    runs-on: ubuntu-latest
    steps:
    - run: echo "Security scanning is disabled for this repository."

  # Job 3: Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Install dependencies
      run: go mod download
      
    - name: Set up envtest (etcd, kube-apiserver)
      run: |
        go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
        export KUBEBUILDER_ASSETS=$(setup-envtest use 1.31.x -p path)
        echo "KUBEBUILDER_ASSETS=$KUBEBUILDER_ASSETS" >> $GITHUB_ENV
        
    - name: Run unit tests
      run: |
        # Run tests with coverage, excluding integration tests
        go test -v -race -coverprofile=coverage.out -covermode=atomic \
          $(go list ./... | grep -v /test/integration)
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.go-version }}
        path: coverage.html

  # Job 4: Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Install dependencies
      run: go mod download
      
    - name: Set up envtest (etcd, kube-apiserver)
      run: |
        go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
        export KUBEBUILDER_ASSETS=$(setup-envtest use 1.31.x -p path)
        echo "KUBEBUILDER_ASSETS=$KUBEBUILDER_ASSETS" >> $GITHUB_ENV
        
    - name: Run integration tests
      run: |
        go test -v -tags=integration ./test/integration/... -timeout=30m
        
  # Job 5: Build and Test Container Image
  container:
    name: Container Build and Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64  # Single platform for CI scanning
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true  # Load the image to local Docker daemon for scanning
        
    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        format: 'sarif'
        output: 'container-scan.sarif'
        
    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'container-scan.sarif'

  # Job 6: Generate and Validate Manifests
  manifests:
    name: Generate and Validate Manifests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Install dependencies
      run: |
        go mod download
        make install-controller-gen
        
    - name: Generate manifests
      run: make manifests
      
    - name: Verify no changes
      run: |
        git diff --exit-code
        if [ $? -ne 0 ]; then
          echo "Generated manifests are out of date. Please run 'make manifests' and commit the changes."
          exit 1
        fi
        
    - name: Validate CRDs
      run: |
        # Validate CRD syntax using kubeval as client-side validation
        go install github.com/instrumenta/kubeval@latest
        $GOPATH/bin/kubeval --strict --ignore-missing-schemas config/crd/bases/*.yaml || true
        
    - name: Generate release manifests
      run: make release-manifests
      
    - name: Upload release manifests
      uses: actions/upload-artifact@v4
      with:
        name: release-manifests
        path: beskar7-manifests-*.yaml

  # Job 7: End-to-End Test Setup Validation
  e2e-setup:
    name: E2E Setup Validation
    runs-on: ubuntu-latest
    needs: [manifests, container]
    steps:
    - uses: actions/checkout@v4
    
    - name: Create kind cluster
      uses: helm/kind-action@v1
      with:
        cluster_name: beskar7-test
        kubectl_version: v1.31.0
        
    - name: Download release manifests
      uses: actions/download-artifact@v4
      with:
        name: release-manifests
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build test image with latest code
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ghcr.io/wrkode/beskar7/beskar7:test
        load: true
        
    - name: Load test image into kind
      run: |
        kind load docker-image ghcr.io/wrkode/beskar7/beskar7:test
        
    - name: Update manifests to use test image
      run: |
        # Replace the v0.2.6 image tag with test tag
        sed -i 's|ghcr.io/wrkode/beskar7/beskar7:v0.2.6|ghcr.io/wrkode/beskar7/beskar7:test|g' beskar7-manifests-*.yaml
        
    - name: Install cert-manager
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.crds.yaml
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml
        kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager -n cert-manager
        kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager-cainjector -n cert-manager
        kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager-webhook -n cert-manager
        
    - name: Apply Beskar7 manifests
      run: |
        kubectl apply -f beskar7-manifests-*.yaml
        
    - name: Wait for controller deployment
      run: |
        kubectl wait --for=condition=Available --timeout=300s deployment/controller-manager -n beskar7-system
        
    - name: Wait for webhook certificates and readiness
      run: |
        # Wait for cert-manager to generate webhook certificates
        echo "Waiting for webhook certificate..."
        kubectl wait --for=condition=Ready --timeout=300s certificate/beskar7-serving-cert -n beskar7-system
        
        # Wait for webhook service endpoints to be ready
        echo "Waiting for controller pods to be ready..."
        kubectl wait --for=condition=Ready --timeout=120s pod -l app.kubernetes.io/name=beskar7 -n beskar7-system
        
        # Verify webhook service has endpoints
        echo "Checking webhook service endpoints..."
        kubectl get endpoints beskar7-webhook-service -n beskar7-system
        
        # Give webhook server additional time to start listening
        echo "Allowing webhook server startup time..."
        sleep 15
        
        # Test webhook connectivity (optional)
        echo "Testing webhook readiness..."
        kubectl get validatingwebhookconfiguration beskar7-validating-webhook-configuration -o yaml | grep -A5 "name: validation.physicalhost"
        
    - name: Test basic functionality
      run: |
        # Create a test PhysicalHost to verify CRDs and webhooks are working
        echo "Creating test secret..."
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: test-credentials
          namespace: default
        stringData:
          username: testuser
          password: testpass
        EOF
        
        echo "Creating test PhysicalHost..."
        if kubectl apply -f - <<EOF
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: PhysicalHost
        metadata:
          name: test-host
          namespace: default
        spec:
          redfishConnection:
            address: "https://test.example.com"
            credentialsSecretRef: "test-credentials"
        EOF
        then
          echo "PhysicalHost created successfully - webhooks are working!"
          
          # Wait for the PhysicalHost to be processed
          sleep 10
          echo "PhysicalHost status:"
          kubectl get physicalhost test-host -o yaml
          
          # Cleanup
          echo "Cleaning up test resources..."
          kubectl delete physicalhost test-host
          kubectl delete secret test-credentials
        else
          echo "Failed to create PhysicalHost - webhook error detected"
          echo "Checking webhook status..."
          kubectl get pods -n beskar7-system
          echo "Full controller logs:"
          kubectl logs -n beskar7-system -l app.kubernetes.io/name=beskar7 --tail=100
          echo "Checking webhook configurations:"
          kubectl get mutatingwebhookconfigurations beskar7-mutating-webhook-configuration -o yaml
          kubectl get validatingwebhookconfigurations beskar7-validating-webhook-configuration -o yaml
          echo "Checking webhook service:"
          kubectl get service beskar7-webhook-service -n beskar7-system
          kubectl get endpoints beskar7-webhook-service -n beskar7-system
          exit 1
        fi

  # Job 8: Performance Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -run=^$ ./... > benchmark.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  # Summary Job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, container, manifests, e2e-setup]
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.lint.result }}" != "success" || \
              "${{ needs.test.result }}" != "success" || \
              "${{ needs.integration-test.result }}" != "success" || \
              "${{ needs.container.result }}" != "success" || \
              "${{ needs.manifests.result }}" != "success" || \
              "${{ needs.e2e-setup.result }}" != "success" ]]; then
          echo "One or more critical jobs failed"
          exit 1
        fi
        echo "All critical CI jobs passed successfully!" 