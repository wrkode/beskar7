apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have functionality that requires root privileges.
        # PÃ²ds created after enabling this option won'''t be able to gain root privileges even if the securityContext
        # at the Container level requests root privileges. Uncomment the following block to apply this:
        # seccompProfile: 
        #   type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
        - --leader-elect
        image: controller:latest # This will be patched by Kustomize
        imagePullPolicy: Always # Ensure image is always pulled
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
        env:
        - name: BESKAR7_REDFISH_SCHEME
          value: "https"
        - name: BESKAR7_REDFISH_PORT
          value: "443"
        - name: BESKAR7_REDFISH_TIMEOUT
          value: "30s"
        - name: BESKAR7_CONTROLLER_REQUEUE_INTERVAL
          value: "15s"
        - name: BESKAR7_CONTROLLER_REQUEUE_AFTER_ERROR
          value: "5m"
        - name: BESKAR7_CONTROLLER_REQUEUE_AFTER_NO_HOST
          value: "1m"
        - name: BESKAR7_RETRY_INITIAL_INTERVAL
          value: "1s"
        - name: BESKAR7_RETRY_MAX_INTERVAL
          value: "5m"
        - name: BESKAR7_RETRY_MULTIPLIER
          value: "2.0"
        - name: BESKAR7_RETRY_MAX_ATTEMPTS
          value: "5"
        - name: BESKAR7_RETRY_MAX_ELAPSED_TIME
          value: "15m"
        - name: BESKAR7_BOOT_DEFAULT_EFI_PATH
          value: "\\EFI\\BOOT\\BOOTX64.EFI"
        - name: BESKAR7_BOOT_DEFAULT_OVERRIDE_ENABLED
          value: "Once"
        - name: BESKAR7_BOOT_DEFAULT_OVERRIDE_TARGET
          value: "UefiTarget"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project estimation
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10 