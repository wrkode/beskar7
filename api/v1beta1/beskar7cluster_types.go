package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	clusterv1 "sigs.k8s.io/cluster-api/api/v1beta1"
)

// Beskar7Cluster specific conditions
const (
	// ControlPlaneEndpointReady documents the availability of the Control Plane Endpoint.
	ControlPlaneEndpointReady clusterv1.ConditionType = "ControlPlaneEndpointReady"
)

// Beskar7Cluster condition reasons
const (
	// ControlPlaneEndpointNotSetReason indicates the ControlPlaneEndpoint is not defined in the spec.
	ControlPlaneEndpointNotSetReason = "ControlPlaneEndpointNotSet"
)

// Beskar7ClusterSpec defines the desired state of Beskar7Cluster.
type Beskar7ClusterSpec struct {
	// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
	// +kubebuilder:validation:Optional
	// +optional
	ControlPlaneEndpoint clusterv1.APIEndpoint `json:"controlPlaneEndpoint"`
}

// Beskar7ClusterStatus defines the observed state of Beskar7Cluster.
type Beskar7ClusterStatus struct {
	// Ready indicates that the cluster is ready.
	// +optional
	Ready bool `json:"ready,omitempty"`

	// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
	// +optional
	ControlPlaneEndpoint clusterv1.APIEndpoint `json:"controlPlaneEndpoint,omitempty"`

	// FailureDomains is a list of failure domain objects synced from the infrastructure provider.
	// +optional
	FailureDomains clusterv1.FailureDomains `json:"failureDomains,omitempty"`

	// Conditions defines current service state of the Beskar7Cluster.
	// +optional
	Conditions clusterv1.Conditions `json:"conditions,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=beskar7clusters,scope=Namespaced,categories=cluster-api
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Cluster",type="string",JSONPath=".metadata.labels.cluster\\.x-k8s\\.io/cluster-name",description="Cluster to which this Beskar7Cluster belongs"
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.ready",description="Beskar7Cluster ready status"
// +kubebuilder:printcolumn:name="Endpoint",type="string",JSONPath=".spec.controlPlaneEndpoint.host",description="Control plane endpoint"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",description="Time duration since creation of Beskar7Cluster"
// +kubebuilder:object:generate=true
// +kubebuilder:storageversion

// Beskar7Cluster is the Schema for the beskar7clusters API.
type Beskar7Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   Beskar7ClusterSpec   `json:"spec,omitempty"`
	Status Beskar7ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Beskar7ClusterList contains a list of Beskar7Cluster.
type Beskar7ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Beskar7Cluster `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Beskar7Cluster{}, &Beskar7ClusterList{})
}

// GetConditions returns the conditions for the Beskar7Cluster.
func (c *Beskar7Cluster) GetConditions() clusterv1.Conditions {
	return c.Status.Conditions
}

// SetConditions sets the conditions for the Beskar7Cluster.
func (c *Beskar7Cluster) SetConditions(conditions clusterv1.Conditions) {
	c.Status.Conditions = conditions
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Beskar7ClusterStatus) DeepCopyInto(out *Beskar7ClusterStatus) {
	*out = *in
	out.ControlPlaneEndpoint = in.ControlPlaneEndpoint
	if in.FailureDomains != nil {
		in, out := &in.FailureDomains, &out.FailureDomains
		*out = make(clusterv1.FailureDomains, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make(clusterv1.Conditions, len(*in))
		copy(*out, *in)
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Beskar7ClusterSpec) DeepCopyInto(out *Beskar7ClusterSpec) {
	*out = *in
	out.ControlPlaneEndpoint = in.ControlPlaneEndpoint
}
